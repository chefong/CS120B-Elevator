
elevator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000674  00000708  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000674  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002c  0080010c  0080010c  00000714  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000714  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000744  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00000784  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000122b  00000000  00000000  00000874  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a70  00000000  00000000  00001a9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a6b  00000000  00000000  0000250f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000228  00000000  00000000  00002f7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000722  00000000  00000000  000031a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000aae  00000000  00000000  000038c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00004374  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	3f c1       	rjmp	.+638    	; 0x2b4 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e7       	ldi	r30, 0x74	; 116
  a0:	f6 e0       	ldi	r31, 0x06	; 6
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 30       	cpi	r26, 0x0C	; 12
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ac e0       	ldi	r26, 0x0C	; 12
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a8 33       	cpi	r26, 0x38	; 56
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	ec d1       	rcall	.+984    	; 0x49c <main>
  c4:	d5 c2       	rjmp	.+1450   	; 0x670 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <SMTick2>:
		if(c==0){return b;}
		a = b;
		b = c;
	}
	return 0;
}
  c8:	20 b1       	in	r18, 0x00	; 0
  ca:	81 30       	cpi	r24, 0x01	; 1
  cc:	91 05       	cpc	r25, r1
  ce:	61 f0       	breq	.+24     	; 0xe8 <SMTick2+0x20>
  d0:	24 f4       	brge	.+8      	; 0xda <SMTick2+0x12>
  d2:	00 97       	sbiw	r24, 0x00	; 0
  d4:	09 f4       	brne	.+2      	; 0xd8 <SMTick2+0x10>
  d6:	4b c0       	rjmp	.+150    	; 0x16e <SMTick2+0xa6>
  d8:	23 c0       	rjmp	.+70     	; 0x120 <SMTick2+0x58>
  da:	82 30       	cpi	r24, 0x02	; 2
  dc:	91 05       	cpc	r25, r1
  de:	71 f0       	breq	.+28     	; 0xfc <SMTick2+0x34>
  e0:	83 30       	cpi	r24, 0x03	; 3
  e2:	91 05       	cpc	r25, r1
  e4:	b1 f0       	breq	.+44     	; 0x112 <SMTick2+0x4a>
  e6:	1c c0       	rjmp	.+56     	; 0x120 <SMTick2+0x58>
  e8:	20 fd       	sbrc	r18, 0
  ea:	46 c0       	rjmp	.+140    	; 0x178 <SMTick2+0xb0>
  ec:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <moving>
  f0:	21 11       	cpse	r18, r1
  f2:	42 c0       	rjmp	.+132    	; 0x178 <SMTick2+0xb0>
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <moving>
  fa:	19 c0       	rjmp	.+50     	; 0x12e <SMTick2+0x66>
  fc:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <moving>
 100:	88 23       	and	r24, r24
 102:	c1 f1       	breq	.+112    	; 0x174 <SMTick2+0xac>
 104:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <blinkTime>
 108:	82 30       	cpi	r24, 0x02	; 2
 10a:	88 f0       	brcs	.+34     	; 0x12e <SMTick2+0x66>
 10c:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <blinkTime>
 110:	23 c0       	rjmp	.+70     	; 0x158 <SMTick2+0x90>
 112:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <blinkTime>
 116:	82 30       	cpi	r24, 0x02	; 2
 118:	f8 f0       	brcs	.+62     	; 0x158 <SMTick2+0x90>
 11a:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <blinkTime>
 11e:	07 c0       	rjmp	.+14     	; 0x12e <SMTick2+0x66>
 120:	82 30       	cpi	r24, 0x02	; 2
 122:	91 05       	cpc	r25, r1
 124:	21 f0       	breq	.+8      	; 0x12e <SMTick2+0x66>
 126:	83 30       	cpi	r24, 0x03	; 3
 128:	91 05       	cpc	r25, r1
 12a:	b1 f0       	breq	.+44     	; 0x158 <SMTick2+0x90>
 12c:	08 95       	ret
 12e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <floorNumber>
 132:	81 30       	cpi	r24, 0x01	; 1
 134:	21 f4       	brne	.+8      	; 0x13e <SMTick2+0x76>
 136:	86 ef       	ldi	r24, 0xF6	; 246
 138:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <display>
 13c:	05 c0       	rjmp	.+10     	; 0x148 <SMTick2+0x80>
 13e:	82 30       	cpi	r24, 0x02	; 2
 140:	19 f4       	brne	.+6      	; 0x148 <SMTick2+0x80>
 142:	88 ec       	ldi	r24, 0xC8	; 200
 144:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <display>
 148:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <blinkTime>
 14c:	8f 5f       	subi	r24, 0xFF	; 255
 14e:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <blinkTime>
 152:	82 e0       	ldi	r24, 0x02	; 2
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	08 95       	ret
 158:	8f ef       	ldi	r24, 0xFF	; 255
 15a:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <display>
 15e:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <blinkTime>
 162:	8f 5f       	subi	r24, 0xFF	; 255
 164:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <blinkTime>
 168:	83 e0       	ldi	r24, 0x03	; 3
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	08 95       	ret
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	08 95       	ret
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	08 95       	ret

0000017a <SMTick3>:
 17a:	20 b1       	in	r18, 0x00	; 0
 17c:	81 30       	cpi	r24, 0x01	; 1
 17e:	91 05       	cpc	r25, r1
 180:	61 f0       	breq	.+24     	; 0x19a <SMTick3+0x20>
 182:	24 f4       	brge	.+8      	; 0x18c <SMTick3+0x12>
 184:	00 97       	sbiw	r24, 0x00	; 0
 186:	09 f4       	brne	.+2      	; 0x18a <SMTick3+0x10>
 188:	4d c0       	rjmp	.+154    	; 0x224 <SMTick3+0xaa>
 18a:	23 c0       	rjmp	.+70     	; 0x1d2 <SMTick3+0x58>
 18c:	82 30       	cpi	r24, 0x02	; 2
 18e:	91 05       	cpc	r25, r1
 190:	b1 f0       	breq	.+44     	; 0x1be <SMTick3+0x44>
 192:	83 30       	cpi	r24, 0x03	; 3
 194:	91 05       	cpc	r25, r1
 196:	c1 f0       	breq	.+48     	; 0x1c8 <SMTick3+0x4e>
 198:	1c c0       	rjmp	.+56     	; 0x1d2 <SMTick3+0x58>
 19a:	20 fd       	sbrc	r18, 0
 19c:	43 c0       	rjmp	.+134    	; 0x224 <SMTick3+0xaa>
 19e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <floorNumber>
 1a2:	82 30       	cpi	r24, 0x02	; 2
 1a4:	29 f4       	brne	.+10     	; 0x1b0 <SMTick3+0x36>
 1a6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1aa:	81 30       	cpi	r24, 0x01	; 1
 1ac:	d9 f5       	brne	.+118    	; 0x224 <SMTick3+0xaa>
 1ae:	1b c0       	rjmp	.+54     	; 0x1e6 <SMTick3+0x6c>
 1b0:	81 30       	cpi	r24, 0x01	; 1
 1b2:	c1 f5       	brne	.+112    	; 0x224 <SMTick3+0xaa>
 1b4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1b8:	82 30       	cpi	r24, 0x02	; 2
 1ba:	a1 f5       	brne	.+104    	; 0x224 <SMTick3+0xaa>
 1bc:	24 c0       	rjmp	.+72     	; 0x206 <SMTick3+0x8c>
 1be:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <moveTime>
 1c2:	8f 30       	cpi	r24, 0x0F	; 15
 1c4:	80 f0       	brcs	.+32     	; 0x1e6 <SMTick3+0x6c>
 1c6:	2e c0       	rjmp	.+92     	; 0x224 <SMTick3+0xaa>
 1c8:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <moveTime>
 1cc:	85 30       	cpi	r24, 0x05	; 5
 1ce:	d8 f0       	brcs	.+54     	; 0x206 <SMTick3+0x8c>
 1d0:	29 c0       	rjmp	.+82     	; 0x224 <SMTick3+0xaa>
 1d2:	82 30       	cpi	r24, 0x02	; 2
 1d4:	91 05       	cpc	r25, r1
 1d6:	39 f0       	breq	.+14     	; 0x1e6 <SMTick3+0x6c>
 1d8:	83 30       	cpi	r24, 0x03	; 3
 1da:	91 05       	cpc	r25, r1
 1dc:	a1 f0       	breq	.+40     	; 0x206 <SMTick3+0x8c>
 1de:	81 30       	cpi	r24, 0x01	; 1
 1e0:	91 05       	cpc	r25, r1
 1e2:	51 f5       	brne	.+84     	; 0x238 <SMTick3+0xbe>
 1e4:	1f c0       	rjmp	.+62     	; 0x224 <SMTick3+0xaa>
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <output3>
 1ec:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <output4>
 1f0:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <moveTime>
 1f4:	8f 5f       	subi	r24, 0xFF	; 255
 1f6:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <moveTime>
 1fa:	82 e0       	ldi	r24, 0x02	; 2
 1fc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 200:	82 e0       	ldi	r24, 0x02	; 2
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	19 c0       	rjmp	.+50     	; 0x238 <SMTick3+0xbe>
 206:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <output3>
 20a:	91 e0       	ldi	r25, 0x01	; 1
 20c:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <output4>
 210:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <moveTime>
 214:	8f 5f       	subi	r24, 0xFF	; 255
 216:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <moveTime>
 21a:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__data_start>
 21e:	83 e0       	ldi	r24, 0x03	; 3
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	0a c0       	rjmp	.+20     	; 0x238 <SMTick3+0xbe>
 224:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <output3>
 228:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <output4>
 22c:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <moveTime>
 230:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <moving>
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <output4>
 23c:	22 0f       	add	r18, r18
 23e:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <output3>
 242:	23 0f       	add	r18, r19
 244:	23 70       	andi	r18, 0x03	; 3
 246:	25 b9       	out	0x05, r18	; 5
 248:	08 95       	ret

0000024a <TimerSet>:
 24a:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <_avr_timer_M>
 24e:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <_avr_timer_M+0x1>
 252:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <_avr_timer_M+0x2>
 256:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <_avr_timer_M+0x3>
 25a:	60 93 32 01 	sts	0x0132, r22	; 0x800132 <_avr_timer_cntcurr>
 25e:	70 93 33 01 	sts	0x0133, r23	; 0x800133 <_avr_timer_cntcurr+0x1>
 262:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <_avr_timer_cntcurr+0x2>
 266:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <_avr_timer_cntcurr+0x3>
 26a:	08 95       	ret

0000026c <TimerOn>:
 26c:	8b e0       	ldi	r24, 0x0B	; 11
 26e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 272:	8d e7       	ldi	r24, 0x7D	; 125
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 27a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 27e:	82 e0       	ldi	r24, 0x02	; 2
 280:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 284:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 288:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 28c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_avr_timer_M>
 290:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <_avr_timer_M+0x1>
 294:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <_avr_timer_M+0x2>
 298:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <_avr_timer_M+0x3>
 29c:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <_avr_timer_cntcurr>
 2a0:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <_avr_timer_cntcurr+0x1>
 2a4:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <_avr_timer_cntcurr+0x2>
 2a8:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <_avr_timer_cntcurr+0x3>
 2ac:	8f b7       	in	r24, 0x3f	; 63
 2ae:	80 68       	ori	r24, 0x80	; 128
 2b0:	8f bf       	out	0x3f, r24	; 63
 2b2:	08 95       	ret

000002b4 <__vector_13>:
 2b4:	1f 92       	push	r1
 2b6:	0f 92       	push	r0
 2b8:	0f b6       	in	r0, 0x3f	; 63
 2ba:	0f 92       	push	r0
 2bc:	11 24       	eor	r1, r1
 2be:	8f 93       	push	r24
 2c0:	9f 93       	push	r25
 2c2:	af 93       	push	r26
 2c4:	bf 93       	push	r27
 2c6:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <_avr_timer_cntcurr>
 2ca:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <_avr_timer_cntcurr+0x1>
 2ce:	a0 91 34 01 	lds	r26, 0x0134	; 0x800134 <_avr_timer_cntcurr+0x2>
 2d2:	b0 91 35 01 	lds	r27, 0x0135	; 0x800135 <_avr_timer_cntcurr+0x3>
 2d6:	01 97       	sbiw	r24, 0x01	; 1
 2d8:	a1 09       	sbc	r26, r1
 2da:	b1 09       	sbc	r27, r1
 2dc:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <_avr_timer_cntcurr>
 2e0:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <_avr_timer_cntcurr+0x1>
 2e4:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <_avr_timer_cntcurr+0x2>
 2e8:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <_avr_timer_cntcurr+0x3>
 2ec:	89 2b       	or	r24, r25
 2ee:	8a 2b       	or	r24, r26
 2f0:	8b 2b       	or	r24, r27
 2f2:	99 f4       	brne	.+38     	; 0x31a <__vector_13+0x66>
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <TimerFlag>
 2fa:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_avr_timer_M>
 2fe:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <_avr_timer_M+0x1>
 302:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <_avr_timer_M+0x2>
 306:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <_avr_timer_M+0x3>
 30a:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <_avr_timer_cntcurr>
 30e:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <_avr_timer_cntcurr+0x1>
 312:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <_avr_timer_cntcurr+0x2>
 316:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <_avr_timer_cntcurr+0x3>
 31a:	bf 91       	pop	r27
 31c:	af 91       	pop	r26
 31e:	9f 91       	pop	r25
 320:	8f 91       	pop	r24
 322:	0f 90       	pop	r0
 324:	0f be       	out	0x3f, r0	; 63
 326:	0f 90       	pop	r0
 328:	1f 90       	pop	r1
 32a:	18 95       	reti

0000032c <initUSART>:
 32c:	81 30       	cpi	r24, 0x01	; 1
 32e:	81 f0       	breq	.+32     	; 0x350 <initUSART+0x24>
 330:	e1 ec       	ldi	r30, 0xC1	; 193
 332:	f0 e0       	ldi	r31, 0x00	; 0
 334:	80 81       	ld	r24, Z
 336:	88 61       	ori	r24, 0x18	; 24
 338:	80 83       	st	Z, r24
 33a:	e2 ec       	ldi	r30, 0xC2	; 194
 33c:	f0 e0       	ldi	r31, 0x00	; 0
 33e:	80 81       	ld	r24, Z
 340:	86 60       	ori	r24, 0x06	; 6
 342:	80 83       	st	Z, r24
 344:	83 e3       	ldi	r24, 0x33	; 51
 346:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 34a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 34e:	08 95       	ret
 350:	e9 ec       	ldi	r30, 0xC9	; 201
 352:	f0 e0       	ldi	r31, 0x00	; 0
 354:	80 81       	ld	r24, Z
 356:	88 61       	ori	r24, 0x18	; 24
 358:	80 83       	st	Z, r24
 35a:	ea ec       	ldi	r30, 0xCA	; 202
 35c:	f0 e0       	ldi	r31, 0x00	; 0
 35e:	80 81       	ld	r24, Z
 360:	86 60       	ori	r24, 0x06	; 6
 362:	80 83       	st	Z, r24
 364:	83 e3       	ldi	r24, 0x33	; 51
 366:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
 36a:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
 36e:	08 95       	ret

00000370 <USART_Send>:
 370:	61 30       	cpi	r22, 0x01	; 1
 372:	41 f0       	breq	.+16     	; 0x384 <USART_Send+0x14>
 374:	e0 ec       	ldi	r30, 0xC0	; 192
 376:	f0 e0       	ldi	r31, 0x00	; 0
 378:	90 81       	ld	r25, Z
 37a:	95 ff       	sbrs	r25, 5
 37c:	fd cf       	rjmp	.-6      	; 0x378 <USART_Send+0x8>
 37e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 382:	08 95       	ret
 384:	e8 ec       	ldi	r30, 0xC8	; 200
 386:	f0 e0       	ldi	r31, 0x00	; 0
 388:	90 81       	ld	r25, Z
 38a:	95 ff       	sbrs	r25, 5
 38c:	fd cf       	rjmp	.-6      	; 0x388 <USART_Send+0x18>
 38e:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 392:	08 95       	ret

00000394 <GetKeypadKey>:
PC2 3   7 | 8 | 9 | C
PC3 4   * | 0 | # | D
*/
unsigned char GetKeypadKey() {

	PORTC = 0xEF; // Enable col 4 with 0, disable others with 1�s
 394:	8f ee       	ldi	r24, 0xEF	; 239
 396:	88 b9       	out	0x08, r24	; 8
	asm("nop"); // add a delay to allow PORTC to stabilize before checking
 398:	00 00       	nop
	if (GetBit(PINC,0)==0) { return('1'); }
 39a:	30 9b       	sbis	0x06, 0	; 6
 39c:	29 c0       	rjmp	.+82     	; 0x3f0 <GetKeypadKey+0x5c>
	if (GetBit(PINC,1)==0) { return('4'); }
 39e:	31 9b       	sbis	0x06, 1	; 6
 3a0:	29 c0       	rjmp	.+82     	; 0x3f4 <GetKeypadKey+0x60>
	if (GetBit(PINC,2)==0) { return('7'); }
 3a2:	32 9b       	sbis	0x06, 2	; 6
 3a4:	29 c0       	rjmp	.+82     	; 0x3f8 <GetKeypadKey+0x64>
	if (GetBit(PINC,3)==0) { return('*'); }
 3a6:	33 9b       	sbis	0x06, 3	; 6
 3a8:	29 c0       	rjmp	.+82     	; 0x3fc <GetKeypadKey+0x68>

	// Check keys in col 2
	PORTC = 0xDF; // Enable col 5 with 0, disable others with 1�s
 3aa:	8f ed       	ldi	r24, 0xDF	; 223
 3ac:	88 b9       	out	0x08, r24	; 8
	asm("nop"); // add a delay to allow PORTC to stabilize before checking
 3ae:	00 00       	nop
	if (GetBit(PINC,0)==0) { return('2'); }
 3b0:	30 9b       	sbis	0x06, 0	; 6
 3b2:	26 c0       	rjmp	.+76     	; 0x400 <__LOCK_REGION_LENGTH__>
	if (GetBit(PINC,1)==0) { return('5'); }
 3b4:	31 9b       	sbis	0x06, 1	; 6
 3b6:	26 c0       	rjmp	.+76     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
	if (GetBit(PINC,2)==0) { return('8'); }
 3b8:	32 9b       	sbis	0x06, 2	; 6
 3ba:	26 c0       	rjmp	.+76     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
	if (GetBit(PINC,3)==0) { return('0'); }
 3bc:	33 9b       	sbis	0x06, 3	; 6
 3be:	26 c0       	rjmp	.+76     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
	// ... *****FINISH*****

	// Check keys in col 3
	PORTC = 0xBF; // Enable col 6 with 0, disable others with 1�s
 3c0:	8f eb       	ldi	r24, 0xBF	; 191
 3c2:	88 b9       	out	0x08, r24	; 8
	asm("nop"); // add a delay to allow PORTC to stabilize before checking
 3c4:	00 00       	nop
	// ... *****FINISH*****
	if (GetBit(PINC,0)==0) { return('3'); }
 3c6:	30 9b       	sbis	0x06, 0	; 6
 3c8:	23 c0       	rjmp	.+70     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
	if (GetBit(PINC,1)==0) { return('6'); }
 3ca:	31 9b       	sbis	0x06, 1	; 6
 3cc:	23 c0       	rjmp	.+70     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
	if (GetBit(PINC,2)==0) { return('9'); }
 3ce:	32 9b       	sbis	0x06, 2	; 6
 3d0:	23 c0       	rjmp	.+70     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
	if (GetBit(PINC,3)==0) { return('#'); }
 3d2:	33 9b       	sbis	0x06, 3	; 6
 3d4:	23 c0       	rjmp	.+70     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>

	// Check keys in col 4	
	// ... *****FINISH*****
	PORTC = 0x7F;
 3d6:	8f e7       	ldi	r24, 0x7F	; 127
 3d8:	88 b9       	out	0x08, r24	; 8
	asm("nop"); // add a delay to allow PORTC to stabilize before checking
 3da:	00 00       	nop
	// ... *****FINISH*****
	if (GetBit(PINC,0)==0) { return('A'); }
 3dc:	30 9b       	sbis	0x06, 0	; 6
 3de:	20 c0       	rjmp	.+64     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
	if (GetBit(PINC,1)==0) { return('B'); }
 3e0:	31 9b       	sbis	0x06, 1	; 6
 3e2:	20 c0       	rjmp	.+64     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
	if (GetBit(PINC,2)==0) { return('C'); }
 3e4:	32 9b       	sbis	0x06, 2	; 6
 3e6:	20 c0       	rjmp	.+64     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
	if (GetBit(PINC,3)==0) { return('D'); }
 3e8:	33 9b       	sbis	0x06, 3	; 6
 3ea:	20 c0       	rjmp	.+64     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>

	return('\0'); // default value
 3ec:	80 e0       	ldi	r24, 0x00	; 0
 3ee:	08 95       	ret
*/
unsigned char GetKeypadKey() {

	PORTC = 0xEF; // Enable col 4 with 0, disable others with 1�s
	asm("nop"); // add a delay to allow PORTC to stabilize before checking
	if (GetBit(PINC,0)==0) { return('1'); }
 3f0:	81 e3       	ldi	r24, 0x31	; 49
 3f2:	08 95       	ret
	if (GetBit(PINC,1)==0) { return('4'); }
 3f4:	84 e3       	ldi	r24, 0x34	; 52
 3f6:	08 95       	ret
	if (GetBit(PINC,2)==0) { return('7'); }
 3f8:	87 e3       	ldi	r24, 0x37	; 55
 3fa:	08 95       	ret
	if (GetBit(PINC,3)==0) { return('*'); }
 3fc:	8a e2       	ldi	r24, 0x2A	; 42
 3fe:	08 95       	ret

	// Check keys in col 2
	PORTC = 0xDF; // Enable col 5 with 0, disable others with 1�s
	asm("nop"); // add a delay to allow PORTC to stabilize before checking
	if (GetBit(PINC,0)==0) { return('2'); }
 400:	82 e3       	ldi	r24, 0x32	; 50
 402:	08 95       	ret
	if (GetBit(PINC,1)==0) { return('5'); }
 404:	85 e3       	ldi	r24, 0x35	; 53
 406:	08 95       	ret
	if (GetBit(PINC,2)==0) { return('8'); }
 408:	88 e3       	ldi	r24, 0x38	; 56
 40a:	08 95       	ret
	if (GetBit(PINC,3)==0) { return('0'); }
 40c:	80 e3       	ldi	r24, 0x30	; 48
 40e:	08 95       	ret

	// Check keys in col 3
	PORTC = 0xBF; // Enable col 6 with 0, disable others with 1�s
	asm("nop"); // add a delay to allow PORTC to stabilize before checking
	// ... *****FINISH*****
	if (GetBit(PINC,0)==0) { return('3'); }
 410:	83 e3       	ldi	r24, 0x33	; 51
 412:	08 95       	ret
	if (GetBit(PINC,1)==0) { return('6'); }
 414:	86 e3       	ldi	r24, 0x36	; 54
 416:	08 95       	ret
	if (GetBit(PINC,2)==0) { return('9'); }
 418:	89 e3       	ldi	r24, 0x39	; 57
 41a:	08 95       	ret
	if (GetBit(PINC,3)==0) { return('#'); }
 41c:	83 e2       	ldi	r24, 0x23	; 35
 41e:	08 95       	ret
	// Check keys in col 4	
	// ... *****FINISH*****
	PORTC = 0x7F;
	asm("nop"); // add a delay to allow PORTC to stabilize before checking
	// ... *****FINISH*****
	if (GetBit(PINC,0)==0) { return('A'); }
 420:	81 e4       	ldi	r24, 0x41	; 65
 422:	08 95       	ret
	if (GetBit(PINC,1)==0) { return('B'); }
 424:	82 e4       	ldi	r24, 0x42	; 66
 426:	08 95       	ret
	if (GetBit(PINC,2)==0) { return('C'); }
 428:	83 e4       	ldi	r24, 0x43	; 67
 42a:	08 95       	ret
	if (GetBit(PINC,3)==0) { return('D'); }
 42c:	84 e4       	ldi	r24, 0x44	; 68

	return('\0'); // default value

}
 42e:	08 95       	ret

00000430 <SMTick1>:
} task;

//Enumeration of states.
enum SM1_States { SM1_Init, SM1_Wait, SM1_On };

int SMTick1(int state) {
 430:	cf 93       	push	r28
 432:	df 93       	push	r29
 434:	ec 01       	movw	r28, r24
	unsigned char press = GetKeypadKey();
 436:	ae df       	rcall	.-164    	; 0x394 <GetKeypadKey>
	
	switch (state) {
 438:	20 97       	sbiw	r28, 0x00	; 0
 43a:	21 f0       	breq	.+8      	; 0x444 <SMTick1+0x14>
 43c:	c1 30       	cpi	r28, 0x01	; 1
 43e:	d1 05       	cpc	r29, r1
 440:	21 f0       	breq	.+8      	; 0x44a <SMTick1+0x1a>
 442:	17 c0       	rjmp	.+46     	; 0x472 <SMTick1+0x42>
		case SM1_Init:
			state = SM1_Wait;
 444:	c1 e0       	ldi	r28, 0x01	; 1
 446:	d0 e0       	ldi	r29, 0x00	; 0
 448:	14 c0       	rjmp	.+40     	; 0x472 <SMTick1+0x42>
			break;
		case SM1_Wait:
			if (press == '1') {
 44a:	81 33       	cpi	r24, 0x31	; 49
 44c:	41 f4       	brne	.+16     	; 0x45e <SMTick1+0x2e>
				floorNumber = 1;
 44e:	81 e0       	ldi	r24, 0x01	; 1
 450:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <floorNumber>
//Functionality - checks if USART is ready to send
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_IsSendReady(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << UDRE0)) : (UCSR1A & (1 << UDRE1));
 454:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
			break;
		default:
			break;
	}
	
	if (USART_IsSendReady(0)) {
 458:	85 fd       	sbrc	r24, 5
 45a:	13 c0       	rjmp	.+38     	; 0x482 <SMTick1+0x52>
 45c:	1b c0       	rjmp	.+54     	; 0x494 <SMTick1+0x64>
			break;
		case SM1_Wait:
			if (press == '1') {
				floorNumber = 1;
			}
			else if (press == '2') {
 45e:	82 33       	cpi	r24, 0x32	; 50
 460:	41 f4       	brne	.+16     	; 0x472 <SMTick1+0x42>
				floorNumber = 2;
 462:	82 e0       	ldi	r24, 0x02	; 2
 464:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <floorNumber>
 468:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
			break;
		default:
			break;
	}
	
	if (USART_IsSendReady(0)) {
 46c:	85 fd       	sbrc	r24, 5
 46e:	0f c0       	rjmp	.+30     	; 0x48e <SMTick1+0x5e>
 470:	11 c0       	rjmp	.+34     	; 0x494 <SMTick1+0x64>
 472:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 476:	85 ff       	sbrs	r24, 5
 478:	0d c0       	rjmp	.+26     	; 0x494 <SMTick1+0x64>
		if (floorNumber == 1) {
 47a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <floorNumber>
 47e:	81 30       	cpi	r24, 0x01	; 1
 480:	21 f4       	brne	.+8      	; 0x48a <SMTick1+0x5a>
			// Assign display to value of segments to turn on number "1"
			//display = one;
			USART_Send(one, 0);
 482:	60 e0       	ldi	r22, 0x00	; 0
 484:	86 ef       	ldi	r24, 0xF6	; 246
 486:	74 df       	rcall	.-280    	; 0x370 <USART_Send>
 488:	05 c0       	rjmp	.+10     	; 0x494 <SMTick1+0x64>
		}
		else if (floorNumber == 2) {
 48a:	82 30       	cpi	r24, 0x02	; 2
 48c:	19 f4       	brne	.+6      	; 0x494 <SMTick1+0x64>
			// Assign display to value of segments to turn on number "2" 
			//display = two;
			USART_Send(two, 0);
 48e:	60 e0       	ldi	r22, 0x00	; 0
 490:	88 ec       	ldi	r24, 0xC8	; 200
 492:	6e df       	rcall	.-292    	; 0x370 <USART_Send>
		}
	}
	
	return state;
}
 494:	ce 01       	movw	r24, r28
 496:	df 91       	pop	r29
 498:	cf 91       	pop	r28
 49a:	08 95       	ret

0000049c <main>:
	
	return state;
}

int main()
{
 49c:	cf 93       	push	r28
 49e:	df 93       	push	r29
 4a0:	00 d0       	rcall	.+0      	; 0x4a2 <main+0x6>
 4a2:	00 d0       	rcall	.+0      	; 0x4a4 <main+0x8>
 4a4:	00 d0       	rcall	.+0      	; 0x4a6 <main+0xa>
 4a6:	cd b7       	in	r28, 0x3d	; 61
 4a8:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0x00; PORTA = 0xFF; // Input
 4aa:	11 b8       	out	0x01, r1	; 1
 4ac:	8f ef       	ldi	r24, 0xFF	; 255
 4ae:	82 b9       	out	0x02, r24	; 2
	DDRD = 0xFF; PORTD = 0x00; // Output
 4b0:	8a b9       	out	0x0a, r24	; 10
 4b2:	1b b8       	out	0x0b, r1	; 11
	DDRB = 0xFF; PORTB = 0x00; // Output
 4b4:	84 b9       	out	0x04, r24	; 4
 4b6:	15 b8       	out	0x05, r1	; 5
	DDRC = 0xF0; PORTC = 0x0F; // PC7..4 outputs init 0s, PC3..0 inputs init 1s
 4b8:	80 ef       	ldi	r24, 0xF0	; 240
 4ba:	87 b9       	out	0x07, r24	; 7
 4bc:	8f e0       	ldi	r24, 0x0F	; 15
 4be:	88 b9       	out	0x08, r24	; 8
 4c0:	0f 2e       	mov	r0, r31
 4c2:	f4 ef       	ldi	r31, 0xF4	; 244
 4c4:	df 2e       	mov	r13, r31
 4c6:	f0 2d       	mov	r31, r0
 4c8:	cc 24       	eor	r12, r12
 4ca:	c3 94       	inc	r12
 4cc:	b1 2c       	mov	r11, r1
 4ce:	a1 2c       	mov	r10, r1
 4d0:	54 e6       	ldi	r21, 0x64	; 100
 4d2:	40 e0       	ldi	r20, 0x00	; 0
 4d4:	30 e0       	ldi	r19, 0x00	; 0
 4d6:	20 e0       	ldi	r18, 0x00	; 0
 4d8:	04 c0       	rjmp	.+8      	; 0x4e2 <main+0x46>
	unsigned long int c;
	while(1){
		c = a%b;
		if(c==0){return b;}
		a = b;
		b = c;
 4da:	d6 2e       	mov	r13, r22
 4dc:	c7 2e       	mov	r12, r23
 4de:	b8 2e       	mov	r11, r24
 4e0:	a9 2e       	mov	r10, r25
// Function that calculates and returns the GCD of 2 long ints
unsigned long int findGCD(unsigned long int a, unsigned long int b)
{
	unsigned long int c;
	while(1){
		c = a%b;
 4e2:	65 2f       	mov	r22, r21
 4e4:	74 2f       	mov	r23, r20
 4e6:	83 2f       	mov	r24, r19
 4e8:	92 2f       	mov	r25, r18
 4ea:	2d 2d       	mov	r18, r13
 4ec:	3c 2d       	mov	r19, r12
 4ee:	4b 2d       	mov	r20, r11
 4f0:	5a 2d       	mov	r21, r10
 4f2:	9c d0       	rcall	.+312    	; 0x62c <__udivmodsi4>
 4f4:	5d 2d       	mov	r21, r13
 4f6:	4c 2d       	mov	r20, r12
 4f8:	3b 2d       	mov	r19, r11
 4fa:	2a 2d       	mov	r18, r10
		if(c==0){return b;}
 4fc:	61 15       	cp	r22, r1
 4fe:	71 05       	cpc	r23, r1
 500:	81 05       	cpc	r24, r1
 502:	91 05       	cpc	r25, r1
 504:	51 f7       	brne	.-44     	; 0x4da <main+0x3e>
 506:	0f 2e       	mov	r0, r31
 508:	f4 e6       	ldi	r31, 0x64	; 100
 50a:	ef 2e       	mov	r14, r31
 50c:	f0 2d       	mov	r31, r0
 50e:	f1 2c       	mov	r15, r1
 510:	00 e0       	ldi	r16, 0x00	; 0
 512:	10 e0       	ldi	r17, 0x00	; 0
 514:	04 c0       	rjmp	.+8      	; 0x51e <main+0x82>
		a = b;
		b = c;
 516:	e6 2e       	mov	r14, r22
 518:	f7 2e       	mov	r15, r23
 51a:	08 2f       	mov	r16, r24
 51c:	19 2f       	mov	r17, r25
// Function that calculates and returns the GCD of 2 long ints
unsigned long int findGCD(unsigned long int a, unsigned long int b)
{
	unsigned long int c;
	while(1){
		c = a%b;
 51e:	6d 2d       	mov	r22, r13
 520:	7c 2d       	mov	r23, r12
 522:	8b 2d       	mov	r24, r11
 524:	9a 2d       	mov	r25, r10
 526:	2e 2d       	mov	r18, r14
 528:	3f 2d       	mov	r19, r15
 52a:	40 2f       	mov	r20, r16
 52c:	51 2f       	mov	r21, r17
 52e:	7e d0       	rcall	.+252    	; 0x62c <__udivmodsi4>
 530:	de 2c       	mov	r13, r14
 532:	cf 2c       	mov	r12, r15
 534:	b0 2e       	mov	r11, r16
 536:	a1 2e       	mov	r10, r17
		if(c==0){return b;}
 538:	61 15       	cp	r22, r1
 53a:	71 05       	cpc	r23, r1
 53c:	81 05       	cpc	r24, r1
 53e:	91 05       	cpc	r25, r1
 540:	51 f7       	brne	.-44     	; 0x516 <main+0x7a>
	
	//Greatest common divisor for all tasks or smallest time unit for tasks.
	unsigned long int GCD = tmpGCD;

	//Recalculate GCD periods for scheduler
	unsigned long int SMTick1_period = SMTick1_calc/GCD;
 542:	64 e6       	ldi	r22, 0x64	; 100
 544:	70 e0       	ldi	r23, 0x00	; 0
 546:	80 e0       	ldi	r24, 0x00	; 0
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	2e 2d       	mov	r18, r14
 54c:	3f 2d       	mov	r19, r15
 54e:	40 2f       	mov	r20, r16
 550:	51 2f       	mov	r21, r17
 552:	6c d0       	rcall	.+216    	; 0x62c <__udivmodsi4>
 554:	49 01       	movw	r8, r18
 556:	5a 01       	movw	r10, r20
	unsigned long int SMTick2_period = SMTick2_calc/GCD;
 558:	64 ef       	ldi	r22, 0xF4	; 244
 55a:	71 e0       	ldi	r23, 0x01	; 1
 55c:	80 e0       	ldi	r24, 0x00	; 0
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	2e 2d       	mov	r18, r14
 562:	3f 2d       	mov	r19, r15
 564:	40 2f       	mov	r20, r16
 566:	51 2f       	mov	r21, r17
 568:	61 d0       	rcall	.+194    	; 0x62c <__udivmodsi4>

	//Declare an array of tasks
	static task task1;
	static task task2;
	static task task3;
	task *tasks[] = { &task1, &task2, &task3 };
 56a:	86 e0       	ldi	r24, 0x06	; 6
 56c:	e6 e0       	ldi	r30, 0x06	; 6
 56e:	f1 e0       	ldi	r31, 0x01	; 1
 570:	de 01       	movw	r26, r28
 572:	11 96       	adiw	r26, 0x01	; 1
 574:	01 90       	ld	r0, Z+
 576:	0d 92       	st	X+, r0
 578:	8a 95       	dec	r24
 57a:	e1 f7       	brne	.-8      	; 0x574 <main+0xd8>
	const unsigned short numTasks = sizeof(tasks)/sizeof(task*);
	
	// BCD to 7 Segment and Keypad task
	task1.state = SM1_Init; //Task initial state.
 57c:	e2 e2       	ldi	r30, 0x22	; 34
 57e:	f1 e0       	ldi	r31, 0x01	; 1
 580:	10 82       	st	Z, r1
	task1.period = SMTick1_period; //Task Period.
 582:	81 82       	std	Z+1, r8	; 0x01
 584:	92 82       	std	Z+2, r9	; 0x02
 586:	a3 82       	std	Z+3, r10	; 0x03
 588:	b4 82       	std	Z+4, r11	; 0x04
	task1.elapsedTime = SMTick1_period; //Task current elapsed time.
 58a:	85 82       	std	Z+5, r8	; 0x05
 58c:	96 82       	std	Z+6, r9	; 0x06
 58e:	a7 82       	std	Z+7, r10	; 0x07
 590:	b0 86       	std	Z+8, r11	; 0x08
	task1.TickFct = &SMTick1; //Function pointer for the tick.
 592:	88 e1       	ldi	r24, 0x18	; 24
 594:	92 e0       	ldi	r25, 0x02	; 2
 596:	92 87       	std	Z+10, r25	; 0x0a
 598:	81 87       	std	Z+9, r24	; 0x09
	
	// Blinking task
	task2.state = SM2_Init; //Task initial state.
 59a:	e7 e1       	ldi	r30, 0x17	; 23
 59c:	f1 e0       	ldi	r31, 0x01	; 1
 59e:	10 82       	st	Z, r1
	task2.period = SMTick2_period; //Task Period.
 5a0:	21 83       	std	Z+1, r18	; 0x01
 5a2:	32 83       	std	Z+2, r19	; 0x02
 5a4:	43 83       	std	Z+3, r20	; 0x03
 5a6:	54 83       	std	Z+4, r21	; 0x04
	task2.elapsedTime = SMTick2_period; //Task current elapsed time.
 5a8:	25 83       	std	Z+5, r18	; 0x05
 5aa:	36 83       	std	Z+6, r19	; 0x06
 5ac:	47 83       	std	Z+7, r20	; 0x07
 5ae:	50 87       	std	Z+8, r21	; 0x08
	task2.TickFct = &SMTick2; //Function pointer for the tick.
 5b0:	84 e6       	ldi	r24, 0x64	; 100
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	92 87       	std	Z+10, r25	; 0x0a
 5b6:	81 87       	std	Z+9, r24	; 0x09
	
	// DC Motor task
	task3.state = SM3_Init; //Task initial state.
 5b8:	ec e0       	ldi	r30, 0x0C	; 12
 5ba:	f1 e0       	ldi	r31, 0x01	; 1
 5bc:	10 82       	st	Z, r1
	task3.period = SMTick3_period; //Task Period.
 5be:	81 82       	std	Z+1, r8	; 0x01
 5c0:	92 82       	std	Z+2, r9	; 0x02
 5c2:	a3 82       	std	Z+3, r10	; 0x03
 5c4:	b4 82       	std	Z+4, r11	; 0x04
	task3.elapsedTime = SMTick3_period; //Task current elapsed time.
 5c6:	85 82       	std	Z+5, r8	; 0x05
 5c8:	96 82       	std	Z+6, r9	; 0x06
 5ca:	a7 82       	std	Z+7, r10	; 0x07
 5cc:	b0 86       	std	Z+8, r11	; 0x08
	task3.TickFct = &SMTick3; //Function pointer for the tick.
 5ce:	8d eb       	ldi	r24, 0xBD	; 189
 5d0:	90 e0       	ldi	r25, 0x00	; 0
 5d2:	92 87       	std	Z+10, r25	; 0x0a
 5d4:	81 87       	std	Z+9, r24	; 0x09

	// Set the timer and turn it on
	TimerSet(GCD);
 5d6:	6e 2d       	mov	r22, r14
 5d8:	7f 2d       	mov	r23, r15
 5da:	80 2f       	mov	r24, r16
	TimerOn();
 5dc:	91 2f       	mov	r25, r17
 5de:	35 de       	rcall	.-918    	; 0x24a <TimerSet>
	
	// Initialize USART
	initUSART(0);
 5e0:	45 de       	rcall	.-886    	; 0x26c <TimerOn>
 5e2:	80 e0       	ldi	r24, 0x00	; 0
 5e4:	a3 de       	rcall	.-698    	; 0x32c <initUSART>
	initUSART(1);
 5e6:	81 e0       	ldi	r24, 0x01	; 1
 5e8:	a1 de       	rcall	.-702    	; 0x32c <initUSART>
 5ea:	6e 01       	movw	r12, r28
 5ec:	87 e0       	ldi	r24, 0x07	; 7
 5ee:	c8 0e       	add	r12, r24
 5f0:	d1 1c       	adc	r13, r1
 5f2:	de 01       	movw	r26, r28
 5f4:	11 96       	adiw	r26, 0x01	; 1
 5f6:	7d 01       	movw	r14, r26
 5f8:	f7 01       	movw	r30, r14

	unsigned short i; // Scheduler for-loop iterator
	while(1) {
		// Scheduler code
		for ( i = 0; i < numTasks; i++ ) {
			tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 5fa:	01 91       	ld	r16, Z+
 5fc:	11 91       	ld	r17, Z+
 5fe:	7f 01       	movw	r14, r30
 600:	d8 01       	movw	r26, r16
 602:	8c 91       	ld	r24, X
 604:	19 96       	adiw	r26, 0x09	; 9
 606:	ed 91       	ld	r30, X+
 608:	fc 91       	ld	r31, X
 60a:	1a 97       	sbiw	r26, 0x0a	; 10
 60c:	08 2e       	mov	r0, r24
 60e:	00 0c       	add	r0, r0
 610:	99 0b       	sbc	r25, r25
 612:	09 95       	icall
 614:	f8 01       	movw	r30, r16
 616:	80 83       	st	Z, r24
 618:	ec 14       	cp	r14, r12
	initUSART(1);

	unsigned short i; // Scheduler for-loop iterator
	while(1) {
		// Scheduler code
		for ( i = 0; i < numTasks; i++ ) {
 61a:	fd 04       	cpc	r15, r13
 61c:	69 f7       	brne	.-38     	; 0x5f8 <main+0x15c>
 61e:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <TimerFlag>
			tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
		}
		while(!TimerFlag);
 622:	88 23       	and	r24, r24
 624:	e1 f3       	breq	.-8      	; 0x61e <main+0x182>
 626:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <TimerFlag>
		TimerFlag = 0;
 62a:	e3 cf       	rjmp	.-58     	; 0x5f2 <main+0x156>

0000062c <__udivmodsi4>:
	}
 62c:	a1 e2       	ldi	r26, 0x21	; 33
 62e:	1a 2e       	mov	r1, r26
 630:	aa 1b       	sub	r26, r26
 632:	bb 1b       	sub	r27, r27
 634:	fd 01       	movw	r30, r26
 636:	0d c0       	rjmp	.+26     	; 0x652 <__udivmodsi4_ep>

00000638 <__udivmodsi4_loop>:
 638:	aa 1f       	adc	r26, r26
 63a:	bb 1f       	adc	r27, r27
 63c:	ee 1f       	adc	r30, r30
 63e:	ff 1f       	adc	r31, r31
 640:	a2 17       	cp	r26, r18
 642:	b3 07       	cpc	r27, r19
 644:	e4 07       	cpc	r30, r20
 646:	f5 07       	cpc	r31, r21
 648:	20 f0       	brcs	.+8      	; 0x652 <__udivmodsi4_ep>
 64a:	a2 1b       	sub	r26, r18
 64c:	b3 0b       	sbc	r27, r19
 64e:	e4 0b       	sbc	r30, r20
 650:	f5 0b       	sbc	r31, r21

00000652 <__udivmodsi4_ep>:
 652:	66 1f       	adc	r22, r22
 654:	77 1f       	adc	r23, r23
 656:	88 1f       	adc	r24, r24
 658:	99 1f       	adc	r25, r25
 65a:	1a 94       	dec	r1
 65c:	69 f7       	brne	.-38     	; 0x638 <__udivmodsi4_loop>
 65e:	60 95       	com	r22
 660:	70 95       	com	r23
 662:	80 95       	com	r24
 664:	90 95       	com	r25
 666:	9b 01       	movw	r18, r22
 668:	ac 01       	movw	r20, r24
 66a:	bd 01       	movw	r22, r26
 66c:	cf 01       	movw	r24, r30
 66e:	08 95       	ret

00000670 <_exit>:
 670:	f8 94       	cli

00000672 <__stop_program>:
 672:	ff cf       	rjmp	.-2      	; 0x672 <__stop_program>
