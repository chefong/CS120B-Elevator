
elevator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  000005d6  0000066a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002c  0080010c  0080010c  00000676  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000676  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  000006e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001055  00000000  00000000  000007a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a52  00000000  00000000  000017f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000084b  00000000  00000000  00002247  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b8  00000000  00000000  00002a94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006a8  00000000  00000000  00002c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000926  00000000  00000000  000032f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00003c1a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	31 c1       	rjmp	.+610    	; 0x298 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 ed       	ldi	r30, 0xD6	; 214
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 30       	cpi	r26, 0x0C	; 12
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ac e0       	ldi	r26, 0x0C	; 12
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a8 33       	cpi	r26, 0x38	; 56
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	a1 d1       	rcall	.+834    	; 0x406 <main>
  c4:	86 c2       	rjmp	.+1292   	; 0x5d2 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <SMTick2>:
		if(c==0){return b;}
		a = b;
		b = c;
	}
	return 0;
}
  c8:	20 b1       	in	r18, 0x00	; 0
  ca:	81 30       	cpi	r24, 0x01	; 1
  cc:	91 05       	cpc	r25, r1
  ce:	61 f0       	breq	.+24     	; 0xe8 <SMTick2+0x20>
  d0:	24 f4       	brge	.+8      	; 0xda <SMTick2+0x12>
  d2:	00 97       	sbiw	r24, 0x00	; 0
  d4:	09 f4       	brne	.+2      	; 0xd8 <SMTick2+0x10>
  d6:	4b c0       	rjmp	.+150    	; 0x16e <SMTick2+0xa6>
  d8:	23 c0       	rjmp	.+70     	; 0x120 <SMTick2+0x58>
  da:	82 30       	cpi	r24, 0x02	; 2
  dc:	91 05       	cpc	r25, r1
  de:	71 f0       	breq	.+28     	; 0xfc <SMTick2+0x34>
  e0:	83 30       	cpi	r24, 0x03	; 3
  e2:	91 05       	cpc	r25, r1
  e4:	b1 f0       	breq	.+44     	; 0x112 <SMTick2+0x4a>
  e6:	1c c0       	rjmp	.+56     	; 0x120 <SMTick2+0x58>
  e8:	20 fd       	sbrc	r18, 0
  ea:	46 c0       	rjmp	.+140    	; 0x178 <SMTick2+0xb0>
  ec:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <moving>
  f0:	21 11       	cpse	r18, r1
  f2:	42 c0       	rjmp	.+132    	; 0x178 <SMTick2+0xb0>
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <moving>
  fa:	19 c0       	rjmp	.+50     	; 0x12e <SMTick2+0x66>
  fc:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <moving>
 100:	88 23       	and	r24, r24
 102:	c1 f1       	breq	.+112    	; 0x174 <SMTick2+0xac>
 104:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <blinkTime>
 108:	82 30       	cpi	r24, 0x02	; 2
 10a:	88 f0       	brcs	.+34     	; 0x12e <SMTick2+0x66>
 10c:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <blinkTime>
 110:	23 c0       	rjmp	.+70     	; 0x158 <SMTick2+0x90>
 112:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <blinkTime>
 116:	82 30       	cpi	r24, 0x02	; 2
 118:	f8 f0       	brcs	.+62     	; 0x158 <SMTick2+0x90>
 11a:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <blinkTime>
 11e:	07 c0       	rjmp	.+14     	; 0x12e <SMTick2+0x66>
 120:	82 30       	cpi	r24, 0x02	; 2
 122:	91 05       	cpc	r25, r1
 124:	21 f0       	breq	.+8      	; 0x12e <SMTick2+0x66>
 126:	83 30       	cpi	r24, 0x03	; 3
 128:	91 05       	cpc	r25, r1
 12a:	b1 f0       	breq	.+44     	; 0x158 <SMTick2+0x90>
 12c:	25 c0       	rjmp	.+74     	; 0x178 <SMTick2+0xb0>
 12e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 132:	81 30       	cpi	r24, 0x01	; 1
 134:	21 f4       	brne	.+8      	; 0x13e <SMTick2+0x76>
 136:	86 ef       	ldi	r24, 0xF6	; 246
 138:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <display>
 13c:	05 c0       	rjmp	.+10     	; 0x148 <SMTick2+0x80>
 13e:	82 30       	cpi	r24, 0x02	; 2
 140:	19 f4       	brne	.+6      	; 0x148 <SMTick2+0x80>
 142:	88 ec       	ldi	r24, 0xC8	; 200
 144:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <display>
 148:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <blinkTime>
 14c:	8f 5f       	subi	r24, 0xFF	; 255
 14e:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <blinkTime>
 152:	82 e0       	ldi	r24, 0x02	; 2
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	10 c0       	rjmp	.+32     	; 0x178 <SMTick2+0xb0>
 158:	8f ef       	ldi	r24, 0xFF	; 255
 15a:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <display>
 15e:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <blinkTime>
 162:	8f 5f       	subi	r24, 0xFF	; 255
 164:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <blinkTime>
 168:	83 e0       	ldi	r24, 0x03	; 3
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	05 c0       	rjmp	.+10     	; 0x178 <SMTick2+0xb0>
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	02 c0       	rjmp	.+4      	; 0x178 <SMTick2+0xb0>
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	20 91 37 01 	lds	r18, 0x0137	; 0x800137 <display>
 17c:	2b b9       	out	0x0b, r18	; 11
 17e:	08 95       	ret

00000180 <SMTick3>:
 180:	20 b1       	in	r18, 0x00	; 0
 182:	81 30       	cpi	r24, 0x01	; 1
 184:	91 05       	cpc	r25, r1
 186:	59 f0       	breq	.+22     	; 0x19e <SMTick3+0x1e>
 188:	1c f4       	brge	.+6      	; 0x190 <SMTick3+0x10>
 18a:	00 97       	sbiw	r24, 0x00	; 0
 18c:	e9 f1       	breq	.+122    	; 0x208 <SMTick3+0x88>
 18e:	18 c0       	rjmp	.+48     	; 0x1c0 <SMTick3+0x40>
 190:	82 30       	cpi	r24, 0x02	; 2
 192:	91 05       	cpc	r25, r1
 194:	81 f0       	breq	.+32     	; 0x1b6 <SMTick3+0x36>
 196:	83 30       	cpi	r24, 0x03	; 3
 198:	91 05       	cpc	r25, r1
 19a:	41 f0       	breq	.+16     	; 0x1ac <SMTick3+0x2c>
 19c:	11 c0       	rjmp	.+34     	; 0x1c0 <SMTick3+0x40>
 19e:	20 fd       	sbrc	r18, 0
 1a0:	33 c0       	rjmp	.+102    	; 0x208 <SMTick3+0x88>
 1a2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1a6:	81 30       	cpi	r24, 0x01	; 1
 1a8:	11 f5       	brne	.+68     	; 0x1ee <SMTick3+0x6e>
 1aa:	14 c0       	rjmp	.+40     	; 0x1d4 <SMTick3+0x54>
 1ac:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <moveTime>
 1b0:	82 33       	cpi	r24, 0x32	; 50
 1b2:	e8 f0       	brcs	.+58     	; 0x1ee <SMTick3+0x6e>
 1b4:	29 c0       	rjmp	.+82     	; 0x208 <SMTick3+0x88>
 1b6:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <moveTime>
 1ba:	84 31       	cpi	r24, 0x14	; 20
 1bc:	58 f0       	brcs	.+22     	; 0x1d4 <SMTick3+0x54>
 1be:	24 c0       	rjmp	.+72     	; 0x208 <SMTick3+0x88>
 1c0:	82 30       	cpi	r24, 0x02	; 2
 1c2:	91 05       	cpc	r25, r1
 1c4:	39 f0       	breq	.+14     	; 0x1d4 <SMTick3+0x54>
 1c6:	83 30       	cpi	r24, 0x03	; 3
 1c8:	91 05       	cpc	r25, r1
 1ca:	89 f0       	breq	.+34     	; 0x1ee <SMTick3+0x6e>
 1cc:	81 30       	cpi	r24, 0x01	; 1
 1ce:	91 05       	cpc	r25, r1
 1d0:	29 f5       	brne	.+74     	; 0x21c <SMTick3+0x9c>
 1d2:	1a c0       	rjmp	.+52     	; 0x208 <SMTick3+0x88>
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <output3>
 1da:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <output4>
 1de:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <moveTime>
 1e2:	8f 5f       	subi	r24, 0xFF	; 255
 1e4:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <moveTime>
 1e8:	82 e0       	ldi	r24, 0x02	; 2
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	17 c0       	rjmp	.+46     	; 0x21c <SMTick3+0x9c>
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <output3>
 1f4:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <output4>
 1f8:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <moveTime>
 1fc:	8f 5f       	subi	r24, 0xFF	; 255
 1fe:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <moveTime>
 202:	83 e0       	ldi	r24, 0x03	; 3
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	0a c0       	rjmp	.+20     	; 0x21c <SMTick3+0x9c>
 208:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <output3>
 20c:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <output4>
 210:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <moveTime>
 214:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <moving>
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <output4>
 220:	22 0f       	add	r18, r18
 222:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <output3>
 226:	23 0f       	add	r18, r19
 228:	23 70       	andi	r18, 0x03	; 3
 22a:	25 b9       	out	0x05, r18	; 5
 22c:	08 95       	ret

0000022e <TimerSet>:
 22e:	60 93 01 01 	sts	0x0101, r22	; 0x800101 <_avr_timer_M>
 232:	70 93 02 01 	sts	0x0102, r23	; 0x800102 <_avr_timer_M+0x1>
 236:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <_avr_timer_M+0x2>
 23a:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <_avr_timer_M+0x3>
 23e:	60 93 32 01 	sts	0x0132, r22	; 0x800132 <_avr_timer_cntcurr>
 242:	70 93 33 01 	sts	0x0133, r23	; 0x800133 <_avr_timer_cntcurr+0x1>
 246:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <_avr_timer_cntcurr+0x2>
 24a:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <_avr_timer_cntcurr+0x3>
 24e:	08 95       	ret

00000250 <TimerOn>:
 250:	8b e0       	ldi	r24, 0x0B	; 11
 252:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 256:	8d e7       	ldi	r24, 0x7D	; 125
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 25e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 262:	82 e0       	ldi	r24, 0x02	; 2
 264:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 268:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 26c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 270:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <_avr_timer_M>
 274:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <_avr_timer_M+0x1>
 278:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <_avr_timer_M+0x2>
 27c:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <_avr_timer_M+0x3>
 280:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <_avr_timer_cntcurr>
 284:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <_avr_timer_cntcurr+0x1>
 288:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <_avr_timer_cntcurr+0x2>
 28c:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <_avr_timer_cntcurr+0x3>
 290:	8f b7       	in	r24, 0x3f	; 63
 292:	80 68       	ori	r24, 0x80	; 128
 294:	8f bf       	out	0x3f, r24	; 63
 296:	08 95       	ret

00000298 <__vector_13>:
 298:	1f 92       	push	r1
 29a:	0f 92       	push	r0
 29c:	0f b6       	in	r0, 0x3f	; 63
 29e:	0f 92       	push	r0
 2a0:	11 24       	eor	r1, r1
 2a2:	8f 93       	push	r24
 2a4:	9f 93       	push	r25
 2a6:	af 93       	push	r26
 2a8:	bf 93       	push	r27
 2aa:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <_avr_timer_cntcurr>
 2ae:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <_avr_timer_cntcurr+0x1>
 2b2:	a0 91 34 01 	lds	r26, 0x0134	; 0x800134 <_avr_timer_cntcurr+0x2>
 2b6:	b0 91 35 01 	lds	r27, 0x0135	; 0x800135 <_avr_timer_cntcurr+0x3>
 2ba:	01 97       	sbiw	r24, 0x01	; 1
 2bc:	a1 09       	sbc	r26, r1
 2be:	b1 09       	sbc	r27, r1
 2c0:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <_avr_timer_cntcurr>
 2c4:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <_avr_timer_cntcurr+0x1>
 2c8:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <_avr_timer_cntcurr+0x2>
 2cc:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <_avr_timer_cntcurr+0x3>
 2d0:	89 2b       	or	r24, r25
 2d2:	8a 2b       	or	r24, r26
 2d4:	8b 2b       	or	r24, r27
 2d6:	99 f4       	brne	.+38     	; 0x2fe <__vector_13+0x66>
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <TimerFlag>
 2de:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <_avr_timer_M>
 2e2:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <_avr_timer_M+0x1>
 2e6:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <_avr_timer_M+0x2>
 2ea:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <_avr_timer_M+0x3>
 2ee:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <_avr_timer_cntcurr>
 2f2:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <_avr_timer_cntcurr+0x1>
 2f6:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <_avr_timer_cntcurr+0x2>
 2fa:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <_avr_timer_cntcurr+0x3>
 2fe:	bf 91       	pop	r27
 300:	af 91       	pop	r26
 302:	9f 91       	pop	r25
 304:	8f 91       	pop	r24
 306:	0f 90       	pop	r0
 308:	0f be       	out	0x3f, r0	; 63
 30a:	0f 90       	pop	r0
 30c:	1f 90       	pop	r1
 30e:	18 95       	reti

00000310 <GetKeypadKey>:
PC2 3   7 | 8 | 9 | C
PC3 4   * | 0 | # | D
*/
unsigned char GetKeypadKey() {

	PORTC = 0xEF; // Enable col 4 with 0, disable others with 1�s
 310:	8f ee       	ldi	r24, 0xEF	; 239
 312:	88 b9       	out	0x08, r24	; 8
	asm("nop"); // add a delay to allow PORTC to stabilize before checking
 314:	00 00       	nop
	if (GetBit(PINC,0)==0) { return('1'); }
 316:	30 9b       	sbis	0x06, 0	; 6
 318:	29 c0       	rjmp	.+82     	; 0x36c <GetKeypadKey+0x5c>
	if (GetBit(PINC,1)==0) { return('4'); }
 31a:	31 9b       	sbis	0x06, 1	; 6
 31c:	29 c0       	rjmp	.+82     	; 0x370 <GetKeypadKey+0x60>
	if (GetBit(PINC,2)==0) { return('7'); }
 31e:	32 9b       	sbis	0x06, 2	; 6
 320:	29 c0       	rjmp	.+82     	; 0x374 <GetKeypadKey+0x64>
	if (GetBit(PINC,3)==0) { return('*'); }
 322:	33 9b       	sbis	0x06, 3	; 6
 324:	29 c0       	rjmp	.+82     	; 0x378 <GetKeypadKey+0x68>

	// Check keys in col 2
	PORTC = 0xDF; // Enable col 5 with 0, disable others with 1�s
 326:	8f ed       	ldi	r24, 0xDF	; 223
 328:	88 b9       	out	0x08, r24	; 8
	asm("nop"); // add a delay to allow PORTC to stabilize before checking
 32a:	00 00       	nop
	if (GetBit(PINC,0)==0) { return('2'); }
 32c:	30 9b       	sbis	0x06, 0	; 6
 32e:	26 c0       	rjmp	.+76     	; 0x37c <GetKeypadKey+0x6c>
	if (GetBit(PINC,1)==0) { return('5'); }
 330:	31 9b       	sbis	0x06, 1	; 6
 332:	26 c0       	rjmp	.+76     	; 0x380 <GetKeypadKey+0x70>
	if (GetBit(PINC,2)==0) { return('8'); }
 334:	32 9b       	sbis	0x06, 2	; 6
 336:	26 c0       	rjmp	.+76     	; 0x384 <GetKeypadKey+0x74>
	if (GetBit(PINC,3)==0) { return('0'); }
 338:	33 9b       	sbis	0x06, 3	; 6
 33a:	26 c0       	rjmp	.+76     	; 0x388 <GetKeypadKey+0x78>
	// ... *****FINISH*****

	// Check keys in col 3
	PORTC = 0xBF; // Enable col 6 with 0, disable others with 1�s
 33c:	8f eb       	ldi	r24, 0xBF	; 191
 33e:	88 b9       	out	0x08, r24	; 8
	asm("nop"); // add a delay to allow PORTC to stabilize before checking
 340:	00 00       	nop
	// ... *****FINISH*****
	if (GetBit(PINC,0)==0) { return('3'); }
 342:	30 9b       	sbis	0x06, 0	; 6
 344:	23 c0       	rjmp	.+70     	; 0x38c <GetKeypadKey+0x7c>
	if (GetBit(PINC,1)==0) { return('6'); }
 346:	31 9b       	sbis	0x06, 1	; 6
 348:	23 c0       	rjmp	.+70     	; 0x390 <GetKeypadKey+0x80>
	if (GetBit(PINC,2)==0) { return('9'); }
 34a:	32 9b       	sbis	0x06, 2	; 6
 34c:	23 c0       	rjmp	.+70     	; 0x394 <GetKeypadKey+0x84>
	if (GetBit(PINC,3)==0) { return('#'); }
 34e:	33 9b       	sbis	0x06, 3	; 6
 350:	23 c0       	rjmp	.+70     	; 0x398 <GetKeypadKey+0x88>

	// Check keys in col 4	
	// ... *****FINISH*****
	PORTC = 0x7F;
 352:	8f e7       	ldi	r24, 0x7F	; 127
 354:	88 b9       	out	0x08, r24	; 8
	asm("nop"); // add a delay to allow PORTC to stabilize before checking
 356:	00 00       	nop
	// ... *****FINISH*****
	if (GetBit(PINC,0)==0) { return('A'); }
 358:	30 9b       	sbis	0x06, 0	; 6
 35a:	20 c0       	rjmp	.+64     	; 0x39c <GetKeypadKey+0x8c>
	if (GetBit(PINC,1)==0) { return('B'); }
 35c:	31 9b       	sbis	0x06, 1	; 6
 35e:	20 c0       	rjmp	.+64     	; 0x3a0 <GetKeypadKey+0x90>
	if (GetBit(PINC,2)==0) { return('C'); }
 360:	32 9b       	sbis	0x06, 2	; 6
 362:	20 c0       	rjmp	.+64     	; 0x3a4 <GetKeypadKey+0x94>
	if (GetBit(PINC,3)==0) { return('D'); }
 364:	33 9b       	sbis	0x06, 3	; 6
 366:	20 c0       	rjmp	.+64     	; 0x3a8 <GetKeypadKey+0x98>

	return('\0'); // default value
 368:	80 e0       	ldi	r24, 0x00	; 0
 36a:	08 95       	ret
*/
unsigned char GetKeypadKey() {

	PORTC = 0xEF; // Enable col 4 with 0, disable others with 1�s
	asm("nop"); // add a delay to allow PORTC to stabilize before checking
	if (GetBit(PINC,0)==0) { return('1'); }
 36c:	81 e3       	ldi	r24, 0x31	; 49
 36e:	08 95       	ret
	if (GetBit(PINC,1)==0) { return('4'); }
 370:	84 e3       	ldi	r24, 0x34	; 52
 372:	08 95       	ret
	if (GetBit(PINC,2)==0) { return('7'); }
 374:	87 e3       	ldi	r24, 0x37	; 55
 376:	08 95       	ret
	if (GetBit(PINC,3)==0) { return('*'); }
 378:	8a e2       	ldi	r24, 0x2A	; 42
 37a:	08 95       	ret

	// Check keys in col 2
	PORTC = 0xDF; // Enable col 5 with 0, disable others with 1�s
	asm("nop"); // add a delay to allow PORTC to stabilize before checking
	if (GetBit(PINC,0)==0) { return('2'); }
 37c:	82 e3       	ldi	r24, 0x32	; 50
 37e:	08 95       	ret
	if (GetBit(PINC,1)==0) { return('5'); }
 380:	85 e3       	ldi	r24, 0x35	; 53
 382:	08 95       	ret
	if (GetBit(PINC,2)==0) { return('8'); }
 384:	88 e3       	ldi	r24, 0x38	; 56
 386:	08 95       	ret
	if (GetBit(PINC,3)==0) { return('0'); }
 388:	80 e3       	ldi	r24, 0x30	; 48
 38a:	08 95       	ret

	// Check keys in col 3
	PORTC = 0xBF; // Enable col 6 with 0, disable others with 1�s
	asm("nop"); // add a delay to allow PORTC to stabilize before checking
	// ... *****FINISH*****
	if (GetBit(PINC,0)==0) { return('3'); }
 38c:	83 e3       	ldi	r24, 0x33	; 51
 38e:	08 95       	ret
	if (GetBit(PINC,1)==0) { return('6'); }
 390:	86 e3       	ldi	r24, 0x36	; 54
 392:	08 95       	ret
	if (GetBit(PINC,2)==0) { return('9'); }
 394:	89 e3       	ldi	r24, 0x39	; 57
 396:	08 95       	ret
	if (GetBit(PINC,3)==0) { return('#'); }
 398:	83 e2       	ldi	r24, 0x23	; 35
 39a:	08 95       	ret
	// Check keys in col 4	
	// ... *****FINISH*****
	PORTC = 0x7F;
	asm("nop"); // add a delay to allow PORTC to stabilize before checking
	// ... *****FINISH*****
	if (GetBit(PINC,0)==0) { return('A'); }
 39c:	81 e4       	ldi	r24, 0x41	; 65
 39e:	08 95       	ret
	if (GetBit(PINC,1)==0) { return('B'); }
 3a0:	82 e4       	ldi	r24, 0x42	; 66
 3a2:	08 95       	ret
	if (GetBit(PINC,2)==0) { return('C'); }
 3a4:	83 e4       	ldi	r24, 0x43	; 67
 3a6:	08 95       	ret
	if (GetBit(PINC,3)==0) { return('D'); }
 3a8:	84 e4       	ldi	r24, 0x44	; 68

	return('\0'); // default value

}
 3aa:	08 95       	ret

000003ac <SMTick1>:
} task;

//Enumeration of states.
enum SM1_States { SM1_Init, SM1_Wait, SM1_On };

int SMTick1(int state) {
 3ac:	cf 93       	push	r28
 3ae:	df 93       	push	r29
 3b0:	ec 01       	movw	r28, r24
	unsigned char press = GetKeypadKey();
 3b2:	ae df       	rcall	.-164    	; 0x310 <GetKeypadKey>
	
	switch (state) {
 3b4:	20 97       	sbiw	r28, 0x00	; 0
 3b6:	21 f0       	breq	.+8      	; 0x3c0 <SMTick1+0x14>
 3b8:	c1 30       	cpi	r28, 0x01	; 1
 3ba:	d1 05       	cpc	r29, r1
 3bc:	21 f0       	breq	.+8      	; 0x3c6 <SMTick1+0x1a>
 3be:	0f c0       	rjmp	.+30     	; 0x3de <SMTick1+0x32>
		case SM1_Init:
			state = SM1_Wait;
 3c0:	c1 e0       	ldi	r28, 0x01	; 1
 3c2:	d0 e0       	ldi	r29, 0x00	; 0
 3c4:	0c c0       	rjmp	.+24     	; 0x3de <SMTick1+0x32>
			break;
		case SM1_Wait:
			if (press == '1') {
 3c6:	81 33       	cpi	r24, 0x31	; 49
 3c8:	21 f4       	brne	.+8      	; 0x3d2 <SMTick1+0x26>
				floorNumber = 1;
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 3d0:	0a c0       	rjmp	.+20     	; 0x3e6 <SMTick1+0x3a>
			}
			else if (press == '2') {
 3d2:	82 33       	cpi	r24, 0x32	; 50
 3d4:	21 f4       	brne	.+8      	; 0x3de <SMTick1+0x32>
				floorNumber = 2;
 3d6:	82 e0       	ldi	r24, 0x02	; 2
 3d8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 3dc:	0a c0       	rjmp	.+20     	; 0x3f2 <SMTick1+0x46>
			break;
		default:
			break;
	}
	
	if (floorNumber == 1) {
 3de:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 3e2:	81 30       	cpi	r24, 0x01	; 1
 3e4:	21 f4       	brne	.+8      	; 0x3ee <SMTick1+0x42>
		// Assign display to value of segments to turn on number "1"
		display = one;
 3e6:	86 ef       	ldi	r24, 0xF6	; 246
 3e8:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <display>
 3ec:	05 c0       	rjmp	.+10     	; 0x3f8 <SMTick1+0x4c>
	}
	else if (floorNumber == 2) {
 3ee:	82 30       	cpi	r24, 0x02	; 2
 3f0:	19 f4       	brne	.+6      	; 0x3f8 <SMTick1+0x4c>
		// Assign display to value of segments to turn on number "2" 
		display = two;
 3f2:	88 ec       	ldi	r24, 0xC8	; 200
 3f4:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <display>
	}
	
	PORTD = display; // Assign PORTB to the floor number value stored in display
 3f8:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <display>
 3fc:	8b b9       	out	0x0b, r24	; 11

	return state;
}
 3fe:	ce 01       	movw	r24, r28
 400:	df 91       	pop	r29
 402:	cf 91       	pop	r28
 404:	08 95       	ret

00000406 <main>:
	
	return state;
}

int main()
{
 406:	cf 93       	push	r28
 408:	df 93       	push	r29
 40a:	00 d0       	rcall	.+0      	; 0x40c <main+0x6>
 40c:	00 d0       	rcall	.+0      	; 0x40e <main+0x8>
 40e:	00 d0       	rcall	.+0      	; 0x410 <main+0xa>
 410:	cd b7       	in	r28, 0x3d	; 61
 412:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0x00; PORTA = 0xFF; // Input
 414:	11 b8       	out	0x01, r1	; 1
 416:	8f ef       	ldi	r24, 0xFF	; 255
 418:	82 b9       	out	0x02, r24	; 2
	DDRD = 0xFF; PORTD = 0x00; // Output
 41a:	8a b9       	out	0x0a, r24	; 10
 41c:	1b b8       	out	0x0b, r1	; 11
	DDRB = 0xFF; PORTB = 0x00; // Output
 41e:	84 b9       	out	0x04, r24	; 4
 420:	15 b8       	out	0x05, r1	; 5
	DDRC = 0xF0; PORTC = 0x0F; // PC7..4 outputs init 0s, PC3..0 inputs init 1s
 422:	80 ef       	ldi	r24, 0xF0	; 240
 424:	87 b9       	out	0x07, r24	; 7
 426:	8f e0       	ldi	r24, 0x0F	; 15
 428:	88 b9       	out	0x08, r24	; 8
 42a:	0f 2e       	mov	r0, r31
 42c:	f4 ef       	ldi	r31, 0xF4	; 244
 42e:	df 2e       	mov	r13, r31
 430:	f0 2d       	mov	r31, r0
 432:	cc 24       	eor	r12, r12
 434:	c3 94       	inc	r12
 436:	b1 2c       	mov	r11, r1
 438:	a1 2c       	mov	r10, r1
 43a:	54 e6       	ldi	r21, 0x64	; 100
 43c:	40 e0       	ldi	r20, 0x00	; 0
 43e:	30 e0       	ldi	r19, 0x00	; 0
 440:	20 e0       	ldi	r18, 0x00	; 0
 442:	04 c0       	rjmp	.+8      	; 0x44c <main+0x46>
	unsigned long int c;
	while(1){
		c = a%b;
		if(c==0){return b;}
		a = b;
		b = c;
 444:	d6 2e       	mov	r13, r22
 446:	c7 2e       	mov	r12, r23
 448:	b8 2e       	mov	r11, r24
 44a:	a9 2e       	mov	r10, r25
// Function that calculates and returns the GCD of 2 long ints
unsigned long int findGCD(unsigned long int a, unsigned long int b)
{
	unsigned long int c;
	while(1){
		c = a%b;
 44c:	65 2f       	mov	r22, r21
 44e:	74 2f       	mov	r23, r20
 450:	83 2f       	mov	r24, r19
 452:	92 2f       	mov	r25, r18
 454:	2d 2d       	mov	r18, r13
 456:	3c 2d       	mov	r19, r12
 458:	4b 2d       	mov	r20, r11
 45a:	5a 2d       	mov	r21, r10
 45c:	98 d0       	rcall	.+304    	; 0x58e <__udivmodsi4>
 45e:	5d 2d       	mov	r21, r13
 460:	4c 2d       	mov	r20, r12
 462:	3b 2d       	mov	r19, r11
 464:	2a 2d       	mov	r18, r10
		if(c==0){return b;}
 466:	61 15       	cp	r22, r1
 468:	71 05       	cpc	r23, r1
 46a:	81 05       	cpc	r24, r1
 46c:	91 05       	cpc	r25, r1
 46e:	51 f7       	brne	.-44     	; 0x444 <main+0x3e>
 470:	0f 2e       	mov	r0, r31
 472:	f4 e6       	ldi	r31, 0x64	; 100
 474:	ef 2e       	mov	r14, r31
 476:	f0 2d       	mov	r31, r0
 478:	f1 2c       	mov	r15, r1
 47a:	00 e0       	ldi	r16, 0x00	; 0
 47c:	10 e0       	ldi	r17, 0x00	; 0
 47e:	04 c0       	rjmp	.+8      	; 0x488 <main+0x82>
		a = b;
		b = c;
 480:	e6 2e       	mov	r14, r22
 482:	f7 2e       	mov	r15, r23
 484:	08 2f       	mov	r16, r24
 486:	19 2f       	mov	r17, r25
// Function that calculates and returns the GCD of 2 long ints
unsigned long int findGCD(unsigned long int a, unsigned long int b)
{
	unsigned long int c;
	while(1){
		c = a%b;
 488:	6d 2d       	mov	r22, r13
 48a:	7c 2d       	mov	r23, r12
 48c:	8b 2d       	mov	r24, r11
 48e:	9a 2d       	mov	r25, r10
 490:	2e 2d       	mov	r18, r14
 492:	3f 2d       	mov	r19, r15
 494:	40 2f       	mov	r20, r16
 496:	51 2f       	mov	r21, r17
 498:	7a d0       	rcall	.+244    	; 0x58e <__udivmodsi4>
 49a:	de 2c       	mov	r13, r14
 49c:	cf 2c       	mov	r12, r15
 49e:	b0 2e       	mov	r11, r16
 4a0:	a1 2e       	mov	r10, r17
		if(c==0){return b;}
 4a2:	61 15       	cp	r22, r1
 4a4:	71 05       	cpc	r23, r1
 4a6:	81 05       	cpc	r24, r1
 4a8:	91 05       	cpc	r25, r1
 4aa:	51 f7       	brne	.-44     	; 0x480 <main+0x7a>
	
	//Greatest common divisor for all tasks or smallest time unit for tasks.
	unsigned long int GCD = tmpGCD;

	//Recalculate GCD periods for scheduler
	unsigned long int SMTick1_period = SMTick1_calc/GCD;
 4ac:	64 e6       	ldi	r22, 0x64	; 100
 4ae:	70 e0       	ldi	r23, 0x00	; 0
 4b0:	80 e0       	ldi	r24, 0x00	; 0
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	2e 2d       	mov	r18, r14
 4b6:	3f 2d       	mov	r19, r15
 4b8:	40 2f       	mov	r20, r16
 4ba:	51 2f       	mov	r21, r17
 4bc:	68 d0       	rcall	.+208    	; 0x58e <__udivmodsi4>
 4be:	49 01       	movw	r8, r18
 4c0:	5a 01       	movw	r10, r20
	unsigned long int SMTick2_period = SMTick2_calc/GCD;
 4c2:	64 ef       	ldi	r22, 0xF4	; 244
 4c4:	71 e0       	ldi	r23, 0x01	; 1
 4c6:	80 e0       	ldi	r24, 0x00	; 0
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	2e 2d       	mov	r18, r14
 4cc:	3f 2d       	mov	r19, r15
 4ce:	40 2f       	mov	r20, r16
 4d0:	51 2f       	mov	r21, r17
 4d2:	5d d0       	rcall	.+186    	; 0x58e <__udivmodsi4>

	//Declare an array of tasks
	static task task1;
	static task task2;
	static task task3;
	task *tasks[] = { &task1, &task2, &task3 };
 4d4:	86 e0       	ldi	r24, 0x06	; 6
 4d6:	e5 e0       	ldi	r30, 0x05	; 5
 4d8:	f1 e0       	ldi	r31, 0x01	; 1
 4da:	de 01       	movw	r26, r28
 4dc:	11 96       	adiw	r26, 0x01	; 1
 4de:	01 90       	ld	r0, Z+
 4e0:	0d 92       	st	X+, r0
 4e2:	8a 95       	dec	r24
 4e4:	e1 f7       	brne	.-8      	; 0x4de <main+0xd8>
	const unsigned short numTasks = sizeof(tasks)/sizeof(task*);
	
	// BCD to 7 Segment and Keypad task
	task1.state = SM1_Init; //Task initial state.
 4e6:	e2 e2       	ldi	r30, 0x22	; 34
 4e8:	f1 e0       	ldi	r31, 0x01	; 1
 4ea:	10 82       	st	Z, r1
	task1.period = SMTick1_period; //Task Period.
 4ec:	81 82       	std	Z+1, r8	; 0x01
 4ee:	92 82       	std	Z+2, r9	; 0x02
 4f0:	a3 82       	std	Z+3, r10	; 0x03
 4f2:	b4 82       	std	Z+4, r11	; 0x04
	task1.elapsedTime = SMTick1_period; //Task current elapsed time.
 4f4:	85 82       	std	Z+5, r8	; 0x05
 4f6:	96 82       	std	Z+6, r9	; 0x06
 4f8:	a7 82       	std	Z+7, r10	; 0x07
 4fa:	b0 86       	std	Z+8, r11	; 0x08
	task1.TickFct = &SMTick1; //Function pointer for the tick.
 4fc:	86 ed       	ldi	r24, 0xD6	; 214
 4fe:	91 e0       	ldi	r25, 0x01	; 1
 500:	92 87       	std	Z+10, r25	; 0x0a
 502:	81 87       	std	Z+9, r24	; 0x09
	
	// Blinking task
	task2.state = SM2_Init; //Task initial state.
 504:	e7 e1       	ldi	r30, 0x17	; 23
 506:	f1 e0       	ldi	r31, 0x01	; 1
 508:	10 82       	st	Z, r1
	task2.period = SMTick2_period; //Task Period.
 50a:	21 83       	std	Z+1, r18	; 0x01
 50c:	32 83       	std	Z+2, r19	; 0x02
 50e:	43 83       	std	Z+3, r20	; 0x03
 510:	54 83       	std	Z+4, r21	; 0x04
	task2.elapsedTime = SMTick2_period; //Task current elapsed time.
 512:	25 83       	std	Z+5, r18	; 0x05
 514:	36 83       	std	Z+6, r19	; 0x06
 516:	47 83       	std	Z+7, r20	; 0x07
 518:	50 87       	std	Z+8, r21	; 0x08
	task2.TickFct = &SMTick2; //Function pointer for the tick.
 51a:	84 e6       	ldi	r24, 0x64	; 100
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	92 87       	std	Z+10, r25	; 0x0a
 520:	81 87       	std	Z+9, r24	; 0x09
	
	// DC Motor task
	task3.state = SM3_Init; //Task initial state.
 522:	ec e0       	ldi	r30, 0x0C	; 12
 524:	f1 e0       	ldi	r31, 0x01	; 1
 526:	10 82       	st	Z, r1
	task3.period = SMTick3_period; //Task Period.
 528:	81 82       	std	Z+1, r8	; 0x01
 52a:	92 82       	std	Z+2, r9	; 0x02
 52c:	a3 82       	std	Z+3, r10	; 0x03
 52e:	b4 82       	std	Z+4, r11	; 0x04
	task3.elapsedTime = SMTick3_period; //Task current elapsed time.
 530:	85 82       	std	Z+5, r8	; 0x05
 532:	96 82       	std	Z+6, r9	; 0x06
 534:	a7 82       	std	Z+7, r10	; 0x07
 536:	b0 86       	std	Z+8, r11	; 0x08
	task3.TickFct = &SMTick3; //Function pointer for the tick.
 538:	80 ec       	ldi	r24, 0xC0	; 192
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	92 87       	std	Z+10, r25	; 0x0a
 53e:	81 87       	std	Z+9, r24	; 0x09

	// Set the timer and turn it on
	TimerSet(GCD);
 540:	6e 2d       	mov	r22, r14
 542:	7f 2d       	mov	r23, r15
 544:	80 2f       	mov	r24, r16
 546:	91 2f       	mov	r25, r17
	TimerOn();
 548:	72 de       	rcall	.-796    	; 0x22e <TimerSet>
 54a:	82 de       	rcall	.-764    	; 0x250 <TimerOn>
 54c:	6e 01       	movw	r12, r28
 54e:	87 e0       	ldi	r24, 0x07	; 7
 550:	c8 0e       	add	r12, r24
 552:	d1 1c       	adc	r13, r1
 554:	de 01       	movw	r26, r28
 556:	11 96       	adiw	r26, 0x01	; 1
 558:	7d 01       	movw	r14, r26

	unsigned short i; // Scheduler for-loop iterator
	while(1) {
		// Scheduler code
		for ( i = 0; i < numTasks; i++ ) {
			tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 55a:	f7 01       	movw	r30, r14
 55c:	01 91       	ld	r16, Z+
 55e:	11 91       	ld	r17, Z+
 560:	7f 01       	movw	r14, r30
 562:	d8 01       	movw	r26, r16
 564:	8c 91       	ld	r24, X
 566:	19 96       	adiw	r26, 0x09	; 9
 568:	ed 91       	ld	r30, X+
 56a:	fc 91       	ld	r31, X
 56c:	1a 97       	sbiw	r26, 0x0a	; 10
 56e:	08 2e       	mov	r0, r24
 570:	00 0c       	add	r0, r0
 572:	99 0b       	sbc	r25, r25
 574:	09 95       	icall
 576:	f8 01       	movw	r30, r16
 578:	80 83       	st	Z, r24
	TimerOn();

	unsigned short i; // Scheduler for-loop iterator
	while(1) {
		// Scheduler code
		for ( i = 0; i < numTasks; i++ ) {
 57a:	ec 14       	cp	r14, r12
 57c:	fd 04       	cpc	r15, r13
 57e:	69 f7       	brne	.-38     	; 0x55a <main+0x154>
			tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
		}
		while(!TimerFlag);
 580:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <TimerFlag>
 584:	88 23       	and	r24, r24
 586:	e1 f3       	breq	.-8      	; 0x580 <main+0x17a>
		TimerFlag = 0;
 588:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <TimerFlag>
	}
 58c:	e3 cf       	rjmp	.-58     	; 0x554 <main+0x14e>

0000058e <__udivmodsi4>:
 58e:	a1 e2       	ldi	r26, 0x21	; 33
 590:	1a 2e       	mov	r1, r26
 592:	aa 1b       	sub	r26, r26
 594:	bb 1b       	sub	r27, r27
 596:	fd 01       	movw	r30, r26
 598:	0d c0       	rjmp	.+26     	; 0x5b4 <__udivmodsi4_ep>

0000059a <__udivmodsi4_loop>:
 59a:	aa 1f       	adc	r26, r26
 59c:	bb 1f       	adc	r27, r27
 59e:	ee 1f       	adc	r30, r30
 5a0:	ff 1f       	adc	r31, r31
 5a2:	a2 17       	cp	r26, r18
 5a4:	b3 07       	cpc	r27, r19
 5a6:	e4 07       	cpc	r30, r20
 5a8:	f5 07       	cpc	r31, r21
 5aa:	20 f0       	brcs	.+8      	; 0x5b4 <__udivmodsi4_ep>
 5ac:	a2 1b       	sub	r26, r18
 5ae:	b3 0b       	sbc	r27, r19
 5b0:	e4 0b       	sbc	r30, r20
 5b2:	f5 0b       	sbc	r31, r21

000005b4 <__udivmodsi4_ep>:
 5b4:	66 1f       	adc	r22, r22
 5b6:	77 1f       	adc	r23, r23
 5b8:	88 1f       	adc	r24, r24
 5ba:	99 1f       	adc	r25, r25
 5bc:	1a 94       	dec	r1
 5be:	69 f7       	brne	.-38     	; 0x59a <__udivmodsi4_loop>
 5c0:	60 95       	com	r22
 5c2:	70 95       	com	r23
 5c4:	80 95       	com	r24
 5c6:	90 95       	com	r25
 5c8:	9b 01       	movw	r18, r22
 5ca:	ac 01       	movw	r20, r24
 5cc:	bd 01       	movw	r22, r26
 5ce:	cf 01       	movw	r24, r30
 5d0:	08 95       	ret

000005d2 <_exit>:
 5d2:	f8 94       	cli

000005d4 <__stop_program>:
 5d4:	ff cf       	rjmp	.-2      	; 0x5d4 <__stop_program>
