
receiver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000002a6  0000033a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800104  00800104  0000033e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000033e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000370  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  000003b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fcb  00000000  00000000  00000488  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009c6  00000000  00000000  00001453  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000730  00000000  00000000  00001e19  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e8  00000000  00000000  0000254c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000062e  00000000  00000000  00002734  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000682  00000000  00000000  00002d62  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  000033e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	7e c0       	rjmp	.+252    	; 0x132 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 ea       	ldi	r30, 0xA6	; 166
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 31       	cpi	r26, 0x14	; 20
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	c0 d0       	rcall	.+384    	; 0x244 <main>
  c4:	ee c0       	rjmp	.+476    	; 0x2a2 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TimerSet>:
		if(c==0){return b;}
		a = b;
		b = c;
	}
	return 0;
}
  c8:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
  cc:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
  d0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
  d4:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
  d8:	60 93 0f 01 	sts	0x010F, r22	; 0x80010f <_avr_timer_cntcurr>
  dc:	70 93 10 01 	sts	0x0110, r23	; 0x800110 <_avr_timer_cntcurr+0x1>
  e0:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <_avr_timer_cntcurr+0x2>
  e4:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <_avr_timer_cntcurr+0x3>
  e8:	08 95       	ret

000000ea <TimerOn>:
  ea:	8b e0       	ldi	r24, 0x0B	; 11
  ec:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  f0:	8d e7       	ldi	r24, 0x7D	; 125
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  f8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  fc:	82 e0       	ldi	r24, 0x02	; 2
  fe:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 102:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 106:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 10a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 10e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 112:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 116:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 11a:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <_avr_timer_cntcurr>
 11e:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <_avr_timer_cntcurr+0x1>
 122:	a0 93 11 01 	sts	0x0111, r26	; 0x800111 <_avr_timer_cntcurr+0x2>
 126:	b0 93 12 01 	sts	0x0112, r27	; 0x800112 <_avr_timer_cntcurr+0x3>
 12a:	8f b7       	in	r24, 0x3f	; 63
 12c:	80 68       	ori	r24, 0x80	; 128
 12e:	8f bf       	out	0x3f, r24	; 63
 130:	08 95       	ret

00000132 <__vector_13>:
 132:	1f 92       	push	r1
 134:	0f 92       	push	r0
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	0f 92       	push	r0
 13a:	11 24       	eor	r1, r1
 13c:	8f 93       	push	r24
 13e:	9f 93       	push	r25
 140:	af 93       	push	r26
 142:	bf 93       	push	r27
 144:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <_avr_timer_cntcurr>
 148:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <_avr_timer_cntcurr+0x1>
 14c:	a0 91 11 01 	lds	r26, 0x0111	; 0x800111 <_avr_timer_cntcurr+0x2>
 150:	b0 91 12 01 	lds	r27, 0x0112	; 0x800112 <_avr_timer_cntcurr+0x3>
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	a1 09       	sbc	r26, r1
 158:	b1 09       	sbc	r27, r1
 15a:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <_avr_timer_cntcurr>
 15e:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <_avr_timer_cntcurr+0x1>
 162:	a0 93 11 01 	sts	0x0111, r26	; 0x800111 <_avr_timer_cntcurr+0x2>
 166:	b0 93 12 01 	sts	0x0112, r27	; 0x800112 <_avr_timer_cntcurr+0x3>
 16a:	89 2b       	or	r24, r25
 16c:	8a 2b       	or	r24, r26
 16e:	8b 2b       	or	r24, r27
 170:	99 f4       	brne	.+38     	; 0x198 <__vector_13+0x66>
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <TimerFlag>
 178:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 17c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 180:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 184:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 188:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <_avr_timer_cntcurr>
 18c:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <_avr_timer_cntcurr+0x1>
 190:	a0 93 11 01 	sts	0x0111, r26	; 0x800111 <_avr_timer_cntcurr+0x2>
 194:	b0 93 12 01 	sts	0x0112, r27	; 0x800112 <_avr_timer_cntcurr+0x3>
 198:	bf 91       	pop	r27
 19a:	af 91       	pop	r26
 19c:	9f 91       	pop	r25
 19e:	8f 91       	pop	r24
 1a0:	0f 90       	pop	r0
 1a2:	0f be       	out	0x3f, r0	; 63
 1a4:	0f 90       	pop	r0
 1a6:	1f 90       	pop	r1
 1a8:	18 95       	reti

000001aa <initUSART>:
 1aa:	81 30       	cpi	r24, 0x01	; 1
 1ac:	81 f0       	breq	.+32     	; 0x1ce <initUSART+0x24>
 1ae:	e1 ec       	ldi	r30, 0xC1	; 193
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	80 81       	ld	r24, Z
 1b4:	88 61       	ori	r24, 0x18	; 24
 1b6:	80 83       	st	Z, r24
 1b8:	e2 ec       	ldi	r30, 0xC2	; 194
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	80 81       	ld	r24, Z
 1be:	86 60       	ori	r24, 0x06	; 6
 1c0:	80 83       	st	Z, r24
 1c2:	83 e3       	ldi	r24, 0x33	; 51
 1c4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 1c8:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 1cc:	08 95       	ret
 1ce:	e9 ec       	ldi	r30, 0xC9	; 201
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	80 81       	ld	r24, Z
 1d4:	88 61       	ori	r24, 0x18	; 24
 1d6:	80 83       	st	Z, r24
 1d8:	ea ec       	ldi	r30, 0xCA	; 202
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	80 81       	ld	r24, Z
 1de:	86 60       	ori	r24, 0x06	; 6
 1e0:	80 83       	st	Z, r24
 1e2:	83 e3       	ldi	r24, 0x33	; 51
 1e4:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
 1e8:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
 1ec:	08 95       	ret

000001ee <USART_Receive>:
 1ee:	81 30       	cpi	r24, 0x01	; 1
 1f0:	41 f0       	breq	.+16     	; 0x202 <USART_Receive+0x14>
 1f2:	e0 ec       	ldi	r30, 0xC0	; 192
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	80 81       	ld	r24, Z
 1f8:	88 23       	and	r24, r24
 1fa:	ec f7       	brge	.-6      	; 0x1f6 <USART_Receive+0x8>
 1fc:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 200:	08 95       	ret
 202:	e8 ec       	ldi	r30, 0xC8	; 200
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	80 81       	ld	r24, Z
 208:	88 23       	and	r24, r24
 20a:	ec f7       	brge	.-6      	; 0x206 <USART_Receive+0x18>
 20c:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 210:	08 95       	ret

00000212 <SMTick1>:
 212:	cf 93       	push	r28
 214:	df 93       	push	r29
 216:	ec 01       	movw	r28, r24
 218:	00 97       	sbiw	r24, 0x00	; 0
 21a:	19 f0       	breq	.+6      	; 0x222 <SMTick1+0x10>
 21c:	01 97       	sbiw	r24, 0x01	; 1
 21e:	21 f0       	breq	.+8      	; 0x228 <SMTick1+0x16>
 220:	0c c0       	rjmp	.+24     	; 0x23a <SMTick1+0x28>
 222:	c1 e0       	ldi	r28, 0x01	; 1
 224:	d0 e0       	ldi	r29, 0x00	; 0
 226:	09 c0       	rjmp	.+18     	; 0x23a <SMTick1+0x28>
 228:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
 22c:	88 23       	and	r24, r24
 22e:	24 f4       	brge	.+8      	; 0x238 <SMTick1+0x26>
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	dd df       	rcall	.-70     	; 0x1ee <USART_Receive>
 234:	28 2f       	mov	r18, r24
 236:	01 c0       	rjmp	.+2      	; 0x23a <SMTick1+0x28>
 238:	2f ef       	ldi	r18, 0xFF	; 255
 23a:	25 b9       	out	0x05, r18	; 5
 23c:	ce 01       	movw	r24, r28
 23e:	df 91       	pop	r29
 240:	cf 91       	pop	r28
 242:	08 95       	ret

00000244 <main>:
	return state;
}

int main()
{
	DDRB = 0xFF; PORTB = 0x00; // Output
 244:	8f ef       	ldi	r24, 0xFF	; 255
 246:	84 b9       	out	0x04, r24	; 4
 248:	15 b8       	out	0x05, r1	; 5
	static task task1;
	task *tasks[] = { &task1 };
	const unsigned short numTasks = sizeof(tasks)/sizeof(task*);
	
	// BCD to 7 Segment and Keypad task
	task1.state = SM1_Init; //Task initial state.
 24a:	e4 e0       	ldi	r30, 0x04	; 4
 24c:	f1 e0       	ldi	r31, 0x01	; 1
 24e:	10 82       	st	Z, r1
	task1.period = SMTick1_period; //Task Period.
 250:	84 e6       	ldi	r24, 0x64	; 100
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	a0 e0       	ldi	r26, 0x00	; 0
 256:	b0 e0       	ldi	r27, 0x00	; 0
 258:	81 83       	std	Z+1, r24	; 0x01
 25a:	92 83       	std	Z+2, r25	; 0x02
 25c:	a3 83       	std	Z+3, r26	; 0x03
 25e:	b4 83       	std	Z+4, r27	; 0x04
	task1.elapsedTime = SMTick1_period; //Task current elapsed time.
 260:	85 83       	std	Z+5, r24	; 0x05
 262:	96 83       	std	Z+6, r25	; 0x06
 264:	a7 83       	std	Z+7, r26	; 0x07
 266:	b0 87       	std	Z+8, r27	; 0x08
	task1.TickFct = &SMTick1; //Function pointer for the tick.
 268:	89 e0       	ldi	r24, 0x09	; 9
 26a:	91 e0       	ldi	r25, 0x01	; 1
 26c:	92 87       	std	Z+10, r25	; 0x0a
 26e:	81 87       	std	Z+9, r24	; 0x09
 
	// Set the timer and turn it on
	TimerSet(SMTick1_period);
 270:	64 e6       	ldi	r22, 0x64	; 100
 272:	70 e0       	ldi	r23, 0x00	; 0
 274:	80 e0       	ldi	r24, 0x00	; 0
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	27 df       	rcall	.-434    	; 0xc8 <TimerSet>
	TimerOn();
 27a:	37 df       	rcall	.-402    	; 0xea <TimerOn>
	
	// Initialize USART
	initUSART(1);
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	95 df       	rcall	.-214    	; 0x1aa <initUSART>
 280:	c4 e0       	ldi	r28, 0x04	; 4

	unsigned short i; // Scheduler for-loop iterator
	while(1) {
		// Scheduler code
		for ( i = 0; i < numTasks; i++ ) {
			tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 282:	d1 e0       	ldi	r29, 0x01	; 1
 284:	88 81       	ld	r24, Y
 286:	e9 85       	ldd	r30, Y+9	; 0x09
 288:	fa 85       	ldd	r31, Y+10	; 0x0a
 28a:	08 2e       	mov	r0, r24
 28c:	00 0c       	add	r0, r0
 28e:	99 0b       	sbc	r25, r25
 290:	09 95       	icall
 292:	88 83       	st	Y, r24
 294:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <TimerFlag>
		}
		while(!TimerFlag);
 298:	88 23       	and	r24, r24
 29a:	e1 f3       	breq	.-8      	; 0x294 <main+0x50>
 29c:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <TimerFlag>
		TimerFlag = 0;
 2a0:	f1 cf       	rjmp	.-30     	; 0x284 <main+0x40>

000002a2 <_exit>:
	}
 2a2:	f8 94       	cli

000002a4 <__stop_program>:
 2a4:	ff cf       	rjmp	.-2      	; 0x2a4 <__stop_program>
